@{
    ViewData["Title"] = "Errors & Warnings";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - Proton Compiler</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Stylesheet -->
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/css/document.css" asp-append-version="true" />
</head>
<body>

    <section class="docs-main">
        <div class="row">
            <!-- Left Sidebar (Table of Contents) -->
            <nav class="col-md-3 bg-light sidebar p-3" style="margin-bottom: 12px;">
                <!-- Desktop Title -->
                <h5 class="d-none d-md-block">The Language Reference & Guide</h5>

                <!-- Mobile TOC Toggle -->
                <div class="d-md-none text-center" style=" font-size: larger; font-weight: bold;">
                    <span class="text-primary" style="color: #8d74e7; cursor: pointer;" data-bs-toggle="collapse" data-bs-target="#mobileToc" aria-expanded="false" aria-controls="mobileToc">
                        Table of Contents
                    </span>
                </div>

                <!-- TOC List -->
                <div class="collapse d-md-block mt-2" id="mobileToc">
                    <ul class="nav flex-column">
                        <!-- Lexical Errors Section -->
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P001" onclick="showMessage('P001'); return false;">Unexpected Character (001)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P002" onclick="showMessage('P002'); return false;">Deprecated Token Usage (002)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P004" onclick="showMessage('P004'); return false;">Invalid Macro Definition (004)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P007" onclick="showMessage('P007'); return false;">Unknown Error (007)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P006" onclick="showMessage('P006'); return false;">Multiple Macro Definition (006)</a>
                        </li>
                        <!-- Add more lexical errors here -->
                        <!-- Parser Errors Section -->
                        <li class="nav-item mt-4">
                            <h6 class="text-uppercase text-muted">Parser Errors (101-200)</h6>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P101" onclick="showMessage('P101'); return false;">Unexpected Token (101)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P102" onclick="showMessage('P102'); return false;">Ambiguous Syntax (102)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P103" onclick="showMessage('P103'); return false;">Missing Semicolon (103)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P104" onclick="showMessage('P104'); return false;">Unrecognized Keyword (104)</a>
                        </li>
                        <!-- Add more parser errors here -->
                        <!-- Semantical Errors Section -->
                        <li class="nav-item mt-4">
                            <h6 class="text-uppercase text-muted">Semantical Errors (201-300)</h6>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P201" onclick="showMessage('P201'); return false;">Type Mismatch (201)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P202" onclick="showMessage('P202'); return false;">Unused Variable (202)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P203" onclick="showMessage('P203'); return false;">Unreachable Code (203)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P204" onclick="showMessage('P204'); return false;">Mismatched Return Type (204)</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link-item" href="#P205" onclick="showMessage('P205'); return false;">Variable Shadowing (205)</a>
                        </li>
                        <!-- Add more semantical errors here -->
                    </ul>
                </div>
            </nav>

            <!-- Right Main Content -->
            <main class="col-md-9">
                <div class="content" id="content">
                    <h1>Proton Error Documentation</h1>
                    <p>Select an error code from the left to view its details.</p>
                </div>
            </main>

        </div>
    </section>

    <script>
        // Define error messages in an object
        const messages = {
            P001: {
                code: 'P001',
                severity: 'Error',
                text: 'Internal compiler error',
                example: '.....',
            },
            P002: {
                code: 'P002',
                severity: 'Error',
                text: 'Deprecated token usage',
                example: '.....',
            },
            P004: {
                code: 'P004',
                severity: 'Error',
                text: 'Invalid macro definition',
                example: '.....',
            },
            P006: {
                code: 'P006',
                severity: 'Warning',
                text: 'Multiple macro definition',
                example: '.....',
            },
            P007: {
                code: 'P007',
                severity: 'Error',
                text: 'Unknown error',
                example: '.....',
            }
        };

        // Function to display error details in the content section
        function showMessage(code) {
            const msg = messages[code];
            if (!msg) {
                console.error(`Unknown error code: ${code}`);
                return;
            } else { console.error(`Error code: ${code}`); }

            // Dynamically update the content area with error details
            const content = document.getElementById('content');
            content.innerHTML = `
                        <h2>Error ${msg.code}</h2>
                        <table>
                            <tr><th>Code</th><td><b>${msg.code}</b></td></tr>
                            <tr><th>Severity</th><td>${msg.severity}</td></tr>
                            <tr><th>Message</th><td>${msg.text}</td></tr>
                        </table>
                        <p>Example <br>
                           The following example generates ${msg.code}: <br>
                           ${msg.example}
                        </p>
                        <hr />
                        <div class="d-flex justify-content-between">
                                            <a class="nav-link-item" href="#P002" onclick="showMessage('P002'); return false;"> ← Previous: “${msg.code}” </a>
                                            <a class="nav-link-item" href="#P004" onclick="showMessage('P004'); return false;"> Next Up: “${msg.code}” →</a>
                        </div>
                    `;
        }

        // Handle initial load for hash-based error display
        window.addEventListener('load', () => {
            const hash = window.location.hash;
            if (hash && hash.startsWith("#P")) {
                const code = hash.substring(1); // "P001"
                showMessage(code);
            }
        });

        // Optional: Add dynamic toggling for the sidebar (responsive behavior)
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            sidebar.classList.toggle('active');
        }
    </script>
</body>
</html>
