<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProtonComplier.Parser</name>
    </assembly>
    <members>
        <member name="T:Proton.Parser.Expressions.AssignExpression">
            <summary>
            Represents an assignment expression, such as the "=" operator used to assign values.
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.AssignExpression.#ctor(Proton.Lexer.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.AssignExpression"/> class.
            Validates that the provided token is of type "Assign".
            </summary>
            <param name="variable">The token representing the assignment operator ("="). </param>
            <exception cref="T:System.Exception">Thrown if the token is not of type "Assign".</exception>
        </member>
        <member name="M:Proton.Parser.Expressions.AssignExpression.ToCode(System.Int32)">
            <summary>
            Generates the string representation of the assignment expression for code generation,
            including the assignment operator and proper indentation.
            </summary>
            <param name="ident">The indentation level (each level equals 4 spaces).</param>
            <returns>A formatted string representing the assignment expression.</returns>
        </member>
        <member name="T:Proton.Parser.Expressions.BinaryExpression">
            <summary>
            Represents a binary expression in the parse tree, such as "x + 3" or "1 + 3 * (1 - 2)".
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.BinaryExpression.#ctor(Proton.Parser.Expressions.Expression,Proton.Parser.Expressions.OperatorExpression,System.Collections.Generic.List{Proton.Lexer.Token})">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.BinaryExpression"/> class.
            </summary>
            <param name="left">The left expression.</param>
            <param name="op">The operator token (e.g., '+', '-', '*').</param>
            <param name="remainingTokens">The remaining tokens for the right-hand side of the expression.</param>
            <exception cref="T:Proton.ErrorHandler.AnalyzerError">Thrown when the right-hand side is missing or improperly formed.</exception>
        </member>
        <member name="P:Proton.Parser.Expressions.BinaryExpression.Left">
            <summary>
            Gets the left-hand side expression of the binary expression.
            </summary>
        </member>
        <member name="P:Proton.Parser.Expressions.BinaryExpression.Operator">
            <summary>
            Gets the operator in the binary expression (e.g., '+', '-', '*').
            </summary>
        </member>
        <member name="P:Proton.Parser.Expressions.BinaryExpression.Right">
            <summary>
            Gets the right-hand side expression of the binary expression.
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.BinaryExpression.ToCode(System.Int32)">
            <summary>
            Generates a human-readable string representation of the binary expression, formatted with indentation.
            </summary>
            <param name="ident">The indentation level.</param>
            <returns>A formatted string representation of the binary expression.</returns>
        </member>
        <member name="M:Proton.Parser.Expressions.BinaryExpression.SetRight(Proton.Parser.Expressions.Expression)">
            <summary>
            Sets the right-hand side expression explicitly.
            </summary>
            <param name="right">The right-hand side expression to assign.</param>
        </member>
        <member name="M:Proton.Parser.Expressions.BinaryExpression.ParseRightExpression(System.Collections.Generic.List{Proton.Lexer.Token})">
            <summary>
            Parses the right-hand side of the binary expression, handling parentheses and nested expressions.
            </summary>
            <param name="tokens">The tokens that represent the right-hand side expression.</param>
            <returns>An <see cref="T:Proton.Parser.Expressions.Expression"/> object representing the parsed right-hand side.</returns>
            <exception cref="T:Proton.ErrorHandler.AnalyzerError">Thrown if the parentheses are empty or malformed.</exception>
        </member>
        <member name="T:Proton.Parser.Expressions.Expression">
            <summary>
            Represents the base class for all expression nodes in the parse tree.
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.Expression.#ctor(Proton.Lexer.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.Expression"/> class using a single token.
            </summary>
            <param name="symbol">The token that represents the expression.</param>
        </member>
        <member name="M:Proton.Parser.Expressions.Expression.ToCode(System.Int32)">
            <summary>
            Converts the expression to its string representation for code generation.
            </summary>
            <param name="ident">Set the ident size of display.</param>
            <returns>A string representation of the expression prefixed with "Exp:".</returns>
        </member>
        <member name="T:Proton.Parser.Expressions.ExpressionParserHelper">
            <summary>
            Provides helper methods for parsing expressions in the Proton parser.
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.ExpressionParserHelper.ParseExpression(System.Collections.Generic.List{Proton.Lexer.Token})">
            <summary>
            Parses a list of tokens into an <see cref="T:Proton.Parser.Expressions.Expression"/> object.
            Supports parenthesis grouping and binary expressions.
            </summary>
            <param name="tokens">The list of tokens to parse.</param>
            <returns>An <see cref="T:Proton.Parser.Expressions.Expression"/> representing the parsed expression tree.</returns>
            <exception cref="T:Proton.ErrorHandler.AnalyzerError">
            Thrown when parentheses are empty or unmatched, or if tokens are invalid for an expression.
            </exception>
        </member>
        <member name="M:Proton.Parser.Expressions.ExpressionParserHelper.FindMatchingParen(System.Collections.Generic.List{Proton.Lexer.Token},System.Int32)">
            <summary>
            Finds the index of the matching closing parenthesis for the opening parenthesis at the specified index.
            </summary>
            <param name="tokens">The list of tokens.</param>
            <param name="startIndex">The index of the opening parenthesis.</param>
            <returns>The index of the matching closing parenthesis.</returns>
            <exception cref="T:Proton.ErrorHandler.AnalyzerError">Thrown when no matching closing parenthesis is found.</exception>
        </member>
        <member name="T:Proton.Parser.Expressions.IdentifierExpression">
            <summary>
            Represents an identifier expression in the parse tree (e.g., variable names like "_varX").
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.IdentifierExpression.#ctor(Proton.Lexer.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.IdentifierExpression"/> class.
            </summary>
            <param name="variable">The token representing the identifier.</param>
            <exception cref="T:System.Exception">Thrown if the token type is not <see cref="F:Proton.Lexer.Enums.TokenType.Identifier"/>.</exception>
        </member>
        <member name="M:Proton.Parser.Expressions.IdentifierExpression.ToCode(System.Int32)">
            <summary>
            Generates the string representation of the identifier expression for code generation,
            including indentation and formatting.
            </summary>
            <param name="ident">The indentation level (each level equals 4 spaces).</param>
            <returns>A formatted string representing the identifier.</returns>
        </member>
        <member name="T:Proton.Parser.Expressions.LiteralExpression">
            <summary>
            Represents an literal expression in the parse tree (e.g., "abc", True/False, -2.34, 'c').
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.LiteralExpression.#ctor(Proton.Lexer.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.LiteralExpression"/> class.
            This constructor checks that the token is of a valid literal type (UInt, Integer, Double, Char, Boolean or String).
            </summary>
            <param name="literalToken">The token representing the literal (UInt, Int, Double, Char, Bool or String).</param>
            <exception cref="T:System.Exception">Thrown when the token type is not a valid literal type.</exception>
        </member>
        <member name="M:Proton.Parser.Expressions.LiteralExpression.ToCode(System.Int32)">
            <summary>
            Generates the string representation of the literal expression for code generation,
            including indentation and formatting.
            </summary>
            <param name="ident">The indentation level (each level equals 4 spaces).</param>
            <returns>A formatted string representing the literal expression with indentation.</returns>
        </member>
        <member name="T:Proton.Parser.Expressions.OperandExpression">
            <summary>
            Represents a single operand in the parse tree, such as a literal or an identifier.
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.OperandExpression.#ctor(Proton.Lexer.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.OperandExpression"/> class.
            Validates that the provided token is either a literal or an identifier.
            </summary>
            <param name="operandToken">The token representing the operand.</param>
            <exception cref="T:Proton.ErrorHandler.AnalyzerError">
            Thrown if the token is not a literal or identifier.
            </exception>
        </member>
        <member name="M:Proton.Parser.Expressions.OperandExpression.ToCode(System.Int32)">
            <summary>
            Generates the string representation of this operand for code generation.
            </summary>
            <param name="ident">The indentation level (each level equals 4 spaces).</param>
            <returns>A string representation of the operand expression.</returns>
        </member>
        <member name="T:Proton.Parser.Expressions.OperatorExpression">
            <summary>
            Represents an operator expression in the parse tree (e.g., "+", "-", "*", "/", "%").
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.OperatorExpression.#ctor(Proton.Lexer.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.OperatorExpression"/> class.
            This constructor checks that the token is of a valid operator type (Addition, Subtraction, Multiplication, Division, or Modulus).
            </summary>
            <param name="operatorToken">The token representing the operator (Addition, Subtraction, Multiplication, Division, or Modulus).</param>
            <exception cref="T:System.Exception">Thrown when the token type is not a valid operator type.</exception>
        </member>
        <member name="M:Proton.Parser.Expressions.OperatorExpression.ToCode(System.Int32)">
            <summary>
            Converts the operator expression to its string representation for code generation.
            </summary>
            <param name="ident">The indentation level (each level equals 4 spaces).</param>
            <returns>A string representation of the operator expression.</returns>
        </member>
        <member name="T:Proton.Parser.Expressions.ParenthesisExpression">
            <summary>
            Represents an expression enclosed in parentheses, such as (2 + 3).
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.ParenthesisExpression"/> class.
            Parses the inner expression from the provided list of tokens.
            </remarks>
            <param name="tokens">The list of tokens within the parentheses.</param>
        </member>
        <member name="M:Proton.Parser.Expressions.ParenthesisExpression.#ctor(System.Collections.Generic.List{Proton.Lexer.Token})">
            <summary>
            Represents an expression enclosed in parentheses, such as (2 + 3).
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.ParenthesisExpression"/> class.
            Parses the inner expression from the provided list of tokens.
            </remarks>
            <param name="tokens">The list of tokens within the parentheses.</param>
        </member>
        <member name="P:Proton.Parser.Expressions.ParenthesisExpression.InnerExpression">
            <summary>
            Gets the inner expression contained within the parentheses.
            </summary>
        </member>
        <member name="P:Proton.Parser.Expressions.ParenthesisExpression.LastToken">
            <summary>
            Gets the last token of the inner expression inside the parentheses.
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.ParenthesisExpression.ToCode(System.Int32)">
            <summary>
            Converts the expression to a formatted code string for debugging or output purposes.
            </summary>
            <param name="ident">The indentation level for formatting.</param>
            <returns>A string representing the expression.</returns>
        </member>
        <member name="M:Proton.Parser.Expressions.ParenthesisExpression.GetLastToken(Proton.Parser.Expressions.Expression)">
            <summary>
            Recursively retrieves the last token of the provided expression.
            This method traverses through different types of expressions to find the last token,
            such as in operand expressions, operator expressions, and binary or parenthetical expressions.
            </summary>
            <param name="expr">The expression whose last token is to be retrieved.</param>
            <returns>The last token of the provided expression.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the expression type is unsupported or cannot have a last token.
            </exception>
        </member>
        <member name="T:Proton.Parser.Expressions.SeparatorExpression">
            <summary>
            Represents a separator expression, such as the colon ":" used in various syntax constructs.
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.SeparatorExpression.#ctor(Proton.Lexer.Token)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.SeparatorExpression"/> class.
            Validates that the provided token is of type "Colon".
            </summary>
            <param name="variable">The token representing the separator (e.g., ":").</param>
            <exception cref="T:System.Exception">Thrown if the token is not of type "Colon".</exception>
        </member>
        <member name="M:Proton.Parser.Expressions.SeparatorExpression.ToCode(System.Int32)">
            <summary>
            Generates the string representation of the separator expression for code generation,
            applying the specified indentation.
            </summary>
            <param name="ident">The indentation level (each level equals 4 spaces).</param>
            <returns>A formatted string representing the separator expression with indentation.</returns>
        </member>
        <member name="T:Proton.Parser.Expressions.TypeExpression">
            <summary>
            Represents a type expression in the syntax tree, such as "N", "R",
            with support for detecting if it represents a list (e.g., "N[]").
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.TypeExpression.#ctor(Proton.Lexer.Token,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.TypeExpression"/> class.
            Validates that the provided token is a valid type token.
            </summary>
            <param name="type">The type token (e.g., "N", "R").</param>
            <param name="isList">Indicates whether the type is a list type (e.g., "N[]").</param>
            <exception cref="T:System.Exception">Thrown if the token is not a recognized type token.</exception>
        </member>
        <member name="P:Proton.Parser.Expressions.TypeExpression.IsList">
            <summary>
            Gets a value indicating whether the type represents a list (e.g., "N[]").
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.TypeExpression.ToCode(System.Int32)">
            <summary>
            Generates the string representation of the type expression for code generation,
            including a "[]" suffix if the type represents a list. Indentation is applied based on the specified level.
            </summary>
            <param name="ident">The indentation level (each level equals 4 spaces).</param>
            <returns>A formatted string representing the type expression.</returns>
        </member>
        <member name="T:Proton.Parser.Expressions.TypeSpecifierExpression">
            <summary>
            Represents a type specifier expression in the parse tree.
            A type specifier can be something like "N[]", "R", or "Z[]..".
            This class handles parsing and storing the list specifier and delimiters, as well as the type expression.
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.TypeSpecifierExpression.#ctor(System.Collections.Generic.List{Proton.Lexer.Token})">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Expressions.TypeSpecifierExpression"/> class.
            Parses the given tokens to extract type specifiers, list indicators, and delimiters.
            </summary>
            <param name="tokens">The list of tokens to parse for the type specifier expression.</param>
            <exception cref="T:System.Exception">Thrown when a critical parsing error occurs due to malformed or unexpected tokens.</exception>
        </member>
        <member name="P:Proton.Parser.Expressions.TypeSpecifierExpression.ListSpecifier">
            <summary>
            Gets the list specifier for the type (e.g., "[]").
            This token represents the square brackets used for array or list type specifications.
            </summary>
        </member>
        <member name="M:Proton.Parser.Expressions.TypeSpecifierExpression.ToCode(System.Int32)">
            <summary>
            Generates the string representation of the <see cref="T:Proton.Parser.Expressions.TypeSpecifierExpression"/> for code generation.
            Delegates to the base implementation to include the full structure of the type, including lists and delimiters,
            with appropriate indentation based on the provided level.
            </summary>
            <param name="ident">The indentation level.</param>
            <returns>A formatted string representing the type specifier expression.</returns>
        </member>
        <member name="T:Proton.Parser.Interfaces.ISyntaxAnalyzer">
            <summary>
            Defines the contract for a syntax analyzer responsible for validating tokenized sections,
            ensuring their proper syntactical structure, and collecting any syntax-related diagnostics.
            </summary>
            <remarks>
            This interface is typically used after lexical analysis to validate the syntax of the parsed code,
            ensuring that it adheres to the expected grammatical rules, and providing feedback for developers.
            </remarks>
        </member>
        <member name="M:Proton.Parser.Interfaces.ISyntaxAnalyzer.Analyze(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Proton.Lexer.Token}})">
            <summary>
            Analyzes the provided tokenized sections, checking for proper syntactical structure and
            identifying any syntax errors or warnings encountered during the analysis.
            </summary>
            <param name="sections">A dictionary containing tokenized input grouped by sections.</param>
            <returns>
            A <see cref="T:Proton.Parser.ParserResult"/> containing:
            <list type="bullet">
              <item><description>Detected syntax errors and warnings</description></item>
              <item><description>Validation result indicating whether the code is syntactically correct</description></item>
            </list>
            </returns>
        </member>
        <member name="T:Proton.Parser.ParseNode">
            <summary>
            Represents a node in the parse tree used during syntax analysis.
            Each node may contain a single token or a list of tokens, and optional left and right child nodes.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Proton.Parser.ParseNode"/> class with a single token.
            </remarks>
            <param name="symbol">The token this node represents.</param>
        </member>
        <member name="M:Proton.Parser.ParseNode.#ctor(Proton.Lexer.Token)">
            <summary>
            Represents a node in the parse tree used during syntax analysis.
            Each node may contain a single token or a list of tokens, and optional left and right child nodes.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Proton.Parser.ParseNode"/> class with a single token.
            </remarks>
            <param name="symbol">The token this node represents.</param>
        </member>
        <member name="P:Proton.Parser.ParseNode.ParseSymbol">
            <summary>
            Gets or sets the primary token represented by this parse tree node.
            </summary>
        </member>
        <member name="P:Proton.Parser.ParseNode.LeftNode">
            <summary>
            Gets the left child node in the parse tree.
            </summary>
        </member>
        <member name="P:Proton.Parser.ParseNode.RightNode">
            <summary>
            Gets the right child node in the parse tree.
            </summary>
        </member>
        <member name="M:Proton.Parser.ParseNode.SetLeft(Proton.Parser.ParseNode)">
            <summary>
            Sets the left child of this node. Can be overridden by derived classes.
            </summary>
            <param name="child">The node to set as the left child.</param>
        </member>
        <member name="M:Proton.Parser.ParseNode.SetRight(Proton.Parser.ParseNode)">
            <summary>
            Sets the right child of this node. Can be overridden by derived classes.
            </summary>
            <param name="child">The node to set as the right child.</param>
        </member>
        <member name="M:Proton.Parser.ParseNode.ToCode(System.Int32)">
            <summary>
            Converts the contents of the token list to a formatted code string.
            </summary>
            <param name="ident">Set the ident size of display.</param>
            <returns>A string representation of the node's token values.</returns>
        </member>
        <member name="T:Proton.Parser.ParserResult">
            <summary>
            Represents the result of parser analysis, including tokens, errors, and macro sections.
            </summary>
        </member>
        <member name="M:Proton.Parser.ParserResult.#ctor(System.Collections.Generic.List{Proton.ErrorHandler.BaseException},System.Collections.Generic.List{Proton.ErrorHandler.BaseException},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Proton.Parser.Statements.Statement}},System.Boolean)">
            <summary>
            Represents the result of parser analysis, including tokens, errors, and macro sections.
            </summary>
        </member>
        <member name="T:Proton.Parser.Service.ParserService">
            <summary>
            Provides a high-level orchestration service for syntax analysis,
            including parsing tokenized input and validating its structure.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Proton.Parser.Service.ParserService"/> class with the specified syntax analyzer.
            </remarks>
            <param name="analyzer">An instance of <see cref="T:Proton.Parser.Interfaces.ISyntaxAnalyzer"/> responsible for analyzing the tokenized sections.</param>
        </member>
        <member name="M:Proton.Parser.Service.ParserService.#ctor(Proton.Parser.Interfaces.ISyntaxAnalyzer)">
            <summary>
            Provides a high-level orchestration service for syntax analysis,
            including parsing tokenized input and validating its structure.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Proton.Parser.Service.ParserService"/> class with the specified syntax analyzer.
            </remarks>
            <param name="analyzer">An instance of <see cref="T:Proton.Parser.Interfaces.ISyntaxAnalyzer"/> responsible for analyzing the tokenized sections.</param>
        </member>
        <member name="M:Proton.Parser.Service.ParserService.Complie(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Proton.Lexer.Token}})">
            <summary>
            Performs the complete syntax analysis process on the provided tokenized sections.
            Analyzes the input sections for proper syntax, structural errors, and overall validity.
            </summary>
            <param name="sections">A dictionary containing tokenized input grouped by sections.</param>
            <returns>A <see cref="T:Proton.Parser.ParserResult"/> containing the result of the analysis, including any errors or warnings detected during parsing.</returns>
        </member>
        <member name="T:Proton.Parser.Statements.Statement">
            <summary>
            Represents the base class for all statement nodes in the parse tree.
            A statement typically performs an action and does not return a value.
            </summary>
        </member>
        <member name="M:Proton.Parser.Statements.Statement.#ctor(Proton.Parser.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Statements.Statement"/> class using a parsed expression.
            </summary>
            <param name="expression">The expression containing the parse symbol for this statement.</param>
        </member>
        <member name="M:Proton.Parser.Statements.Statement.ToCode">
            <summary>
            Converts the statement to its string representation for code generation.
            </summary>
            <returns>A string representation of the statement prefixed with "State:".</returns>
        </member>
        <member name="T:Proton.Parser.Statements.VariableDeclaration">
            <summary>
            Represents a variable declaration statement in the parse tree.
            This includes a variable identifier, separator (like ":"), and type specifier (like "N[];").
            (e.g., "_var1,_var2:N[]; or _var1:N or _var1:Z[];;").
            </summary>
        </member>
        <member name="M:Proton.Parser.Statements.VariableDeclaration.#ctor(Proton.Parser.Expressions.IdentifierExpression,Proton.Parser.Expressions.SeparatorExpression,Proton.Parser.Expressions.TypeSpecifierExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Parser.Statements.VariableDeclaration"/> class.
            This constructor processes the identifier, separator, and type specifier for the variable declaration.
            </summary>
            <param name="identifier">The identifier expression for the variable.</param>
            <param name="separator">The separator expression (e.g., ":").</param>
            <param name="typeSpecifier">The type specifier expression (e.g., "N[];").</param>
            <exception cref="T:System.Exception">Thrown if there is an error in creating the variable declaration components.</exception>
        </member>
        <member name="P:Proton.Parser.Statements.VariableDeclaration.IsList">
            <summary>
            Gets a value indicating whether the statement represents a list (e.g., "N[]").
            </summary>
        </member>
        <member name="M:Proton.Parser.Statements.VariableDeclaration.ToCode">
            <summary>
            Converts the variable declaration statement to its string representation for code generation.
            This method formats the statement into a structured string, including the identifier, separator, and type.
            </summary>
            <returns>A string representation of the variable declaration statement.</returns>
        </member>
        <member name="T:Proton.Parser.SyntaxAnalyzer">
            <summary>
            Represents the main parser class responsible for analyzing tokens from each macro section,
            generating syntax trees, and reporting errors and warnings.
            </summary>
        </member>
        <member name="P:Proton.Parser.SyntaxAnalyzer.CurrentToken">
            <summary>
            Gets the current token at the parsing position, or EndOfInput if out of bounds.
            </summary>
        </member>
        <member name="M:Proton.Parser.SyntaxAnalyzer.Reset">
            <summary>
            Before starting a new syntax analysis, reset everything.
            </summary>
        </member>
        <member name="M:Proton.Parser.SyntaxAnalyzer.StatePlaceParser">
            <summary>
            Parses the StateSpace macro section, handling variable declarations.
            </summary>
        </member>
        <member name="M:Proton.Parser.SyntaxAnalyzer.InputParser">
            <summary>
            Parses the Input macro section, handling variable initialize.
            </summary>
        </member>
        <member name="M:Proton.Parser.SyntaxAnalyzer.PreconditionParser">
            <summary>
            Parses the Precondition macro section, handling variable initialize.
            </summary>
        </member>
        <member name="M:Proton.Parser.SyntaxAnalyzer.PostconditionParser">
            <summary>
            Parses the Postcondition macro section, handling variable initialize.
            </summary>
        </member>
        <member name="M:Proton.Parser.SyntaxAnalyzer.Analyze(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Proton.Lexer.Token}})">
            <summary>
            Analyzes the provided tokenized sections, validating their syntactical structure and identifying
            any syntax errors or warnings. It processes the input and returns the result of the syntax analysis,
            indicating whether the code conforms to the expected grammatical rules.
            </summary>
            <param name="sections">A dictionary containing tokenized input grouped by sections. Each section represents
            a logical unit of code, such as a function, loop, or declaration, with the tokens for that section
            organized in a list.</param>
            <returns>
            A <see cref="T:Proton.Parser.ParserResult"/> containing:
            <list type="bullet">
              <item><description><see cref="P:Proton.Parser.ParserResult.errors"/> – A list of syntax errors encountered during analysis.</description></item>
              <item><description><see cref="P:Proton.Parser.ParserResult.warnings"/> – A list of non-critical syntax warnings that may need attention.</description></item>
              <item><description><see cref="P:Proton.Parser.ParserResult.sections"/> – A dictionary mapping macro section names to their associated parsed statements.</description></item>
              <item><description><see cref="P:Proton.Parser.ParserResult.isSuccessful"/> – A boolean indicating whether the analysis passed successfully without critical errors.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:Proton.Parser.SyntaxAnalyzer.SplitTokensByNewline(System.Collections.Generic.List{Proton.Lexer.Token})">
            <summary>
            Splits a flat list of tokens into rows of tokens separated by newlines,
            removing whitespace and comment tokens.
            </summary>
            <param name="tokens">The input token list.</param>
            <returns>A list of token rows (line-based).</returns>
        </member>
        <member name="M:Proton.Parser.SyntaxAnalyzer.Eat(Proton.Lexer.Token,System.String)">
            <summary>
            Consumes the current token and advances the token position.
            If the next token is null or marks the end of input unexpectedly, a warning is added.
            </summary>
            <param name="token">The current token to be consumed.</param>
            <param name="expressiontype">The expected expression type following the current token.</param>
        </member>
        <member name="M:Proton.Parser.SyntaxAnalyzer.PeekToken(System.Int32)">
            <summary>
            Peeks ahead at a future token in the stream without advancing the current position.
            </summary>
            <param name="offset">The number of tokens to look ahead.</param>
            <returns>The peeked token.</returns>
        </member>
        <member name="T:ProtonComplier.Parser.Expressions.ListExpression">
            <summary>
            Represents a list expression node that parses and stores multiple comma-separated expressions
            within braces (e.g., {expr1, expr2, ...}).
            </summary>
        </member>
        <member name="M:ProtonComplier.Parser.Expressions.ListExpression.#ctor(System.Collections.Generic.List{Proton.Lexer.Token},System.Collections.Generic.List{Proton.ErrorHandler.BaseException})">
            <summary>
            Initializes a new instance of the <see cref="T:ProtonComplier.Parser.Expressions.ListExpression"/> class by parsing tokens enclosed in braces.
            Supports nested expressions and warns on invalid comma usage.
            </summary>
            <param name="tokens">The token list including outer braces and inner expressions.</param>
            <param name="warnings">A collection to which parser warnings are added.</param>
            <exception cref="T:Proton.ErrorHandler.AnalyzerError">Thrown when closing brace is missing or when an empty element is encountered.</exception>
        </member>
        <member name="P:ProtonComplier.Parser.Expressions.ListExpression.Elements">
            <summary>
            Gets the list of parsed expression elements within the list expression.
            </summary>
        </member>
        <member name="M:ProtonComplier.Parser.Expressions.ListExpression.ToCode(System.Int32)">
            <summary>
            Returns a formatted string representation of the list expression, showing each element.
            </summary>
            <param name="ident">Indentation level (for pretty-printing nested structures).</param>
            <returns>A string representing the formatted structure of the list expression.</returns>
        </member>
        <member name="T:ProtonComplier.Parser.Statements.VariableInitialization">
            <summary>
            Represents a variable initialization statement in the parse tree.
            This includes a variable identifier, assign (like "="), and type definier (like "{1,2,(2+5),4..}").
            (e.g., "_var1,_var2=2+(4-6);).
            </summary>
        </member>
        <member name="M:ProtonComplier.Parser.Statements.VariableInitialization.#ctor(Proton.Parser.Expressions.IdentifierExpression,Proton.Parser.Expressions.AssignExpression,Proton.Parser.Expressions.Expression)">
            <summary>
            Initializes a new instance of the <see cref="T:ProtonComplier.Parser.Statements.VariableInitialization"/> class.
            This constructor processes the identifier, separator, and type specifier for the variable declaration.
            </summary>
            <param name="identifier">The identifier expression for the variable.</param>
            <param name="separator">The separator expression (e.g., ":=).</param>
            <param name="valueSpecifier">The type specifier expression (e.g., "{1,2,3,4};").</param>
            <exception cref="T:System.Exception">Thrown if there is an error in creating the variable declaration components.</exception>
        </member>
        <member name="P:ProtonComplier.Parser.Statements.VariableInitialization.IsList">
            <summary>
            Gets a value indicating whether the initialized identifier represents a list (e.g., "{....}").
            </summary>
        </member>
        <member name="M:ProtonComplier.Parser.Statements.VariableInitialization.ToCode">
            <summary>
            Converts the variable initialization statement to its string representation for code generation.
            This method formats the statement into a structured string, including the identifier, assignment, and type.
            </summary>
            <returns>A string representation of the variable initialization statement.</returns>
        </member>
    </members>
</doc>
