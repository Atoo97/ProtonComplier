<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ProtonComplier.Semantic</name>
    </assembly>
    <members>
        <member name="T:Proton.Semantic.Interfaces.ISemanticAnalyzer">
            <summary>
            Defines the contract for a semantic analyzer responsible for validating parsed statement sections,
            ensuring logical correctness, symbol resolution, and proper usage of declared entities.
            </summary>
            <remarks>
            This interface is typically used after syntax analysis. It performs deeper validation of the program's meaning,
            such as type checking, symbol table verification, and semantic rule enforcement.
            </remarks>
        </member>
        <member name="M:Proton.Semantic.Interfaces.ISemanticAnalyzer.Analyze(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Proton.Parser.Statements.Statement}})">
            <summary>
            Analyzes the provided parsed sections for semantic correctness, ensuring consistent use of variables,
            types, and other logical constructs in accordance with language rules.
            </summary>
            <param name="sections">A dictionary containing parsed statements grouped by macro sections.</param>
            <returns>
            A <see cref="T:Proton.Semantic.SemanticResult"/> containing:
            <list type="bullet">
              <item><description>Semantic errors and warnings detected during analysis</description></item>
              <item><description>Overall status indicating whether the analyzed code is semantically valid</description></item>
            </list>
            </returns>
        </member>
        <member name="T:Proton.Semantic.SemanticAnalyzer">
            <summary>
            Represents the main sematical class responsible for analyzing tokens from each macro section,
            generating symbol table, and reporting errors and warnings.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.Reset">
            <summary>
            Before starting a new semantic analysis, reset everything.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.StatePlaceSemantical">
            <summary>
            Semantically analyzes the StateSpace macro section, handling variable declarations.
            This includes verifying identifiers, checking for duplicates, validating type specifiers,
            and populating the symbol table.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.InputSemantical">
            <summary>
            Semantically analyzes the Input macro section, initialize all declared input variables.
            This includes checking identifier naming rules, ensuring type correctness,
            preventing duplicates, and inserting valid symbols into the symbol table.
            All semantic errors or warnings encountered during the analysis are recorded.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.PreconditionParser">
            <summary>
            Semantically analyzes the Precondition macro section.
            This includes checking if expression is boolean.
            All semantic errors or warnings encountered during the analysis are recorded.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.PostconditionParser">
            <summary>
            Semantically analyzes the Postcondition macro section.
            This includes checking if expression is boolean.
            All semantic errors or warnings encountered during the analysis are recorded.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.Analyze(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Proton.Parser.Statements.Statement}})">
            <summary>
            Analyzes the provided parsed statement sections, performing semantic validation such as
            type checking, symbol resolution, and logical rule enforcement. It ensures that the program's logic
            adheres to the defined language semantics.
            </summary>
            <param name="sections">
            A dictionary containing parsed statements grouped by macro sections. Each section represents
            a logical block of code (e.g., StateSpace, Input, Precondition), with its corresponding list of statements.
            </param>
            <returns>
            A <see cref="T:Proton.Semantic.SemanticResult"/> containing:
            <list type="bullet">
              <item><description><see cref="P:Proton.Semantic.SemanticResult.errors"/> – A list of semantic errors found during analysis, such as undeclared variables or type mismatches.</description></item>
              <item><description><see cref="P:Proton.Semantic.SemanticResult.warnings"/> – A list of semantic warnings for non-critical issues, like unused variables or unreachable logic.</description></item>
              <item><description><see cref="P:Proton.Semantic.SemanticResult.sections"/> – A dictionary mapping macro section names to their associated parsed statements.</description></item>
              <item><description><see cref="P:Proton.Semantic.SemanticResult.table"/> – A symbol table mapping identifiers to their semantic information (e.g., type, scope, and location).</description></item>
              <item><description><see cref="P:Proton.Semantic.SemanticResult.isSuccessful"/> – A boolean indicating whether the semantic analysis completed without any critical errors.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.GetSemanticType(Proton.Lexer.Token)">
            <summary>
            Infers the declared semantic type from a token's actual value type.
            </summary>
            <param name="token">The token containing the actual data type.</param>
            <returns>The corresponding declared semantic type.</returns>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.GetCSharpOperator(System.String)">
            <summary>
            Converts a token type name to its corresponding C# operator.
            Returns a tuple indicating whether the conversion was successful and the resulting string.
            </summary>
            <param name="tokenTypeName">The token type name (e.g., "LogicalAnd").</param>
            <returns>A tuple (isFound, result), where isFound is true if the mapping exists, otherwise false.</returns>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.IsStringOperator(Proton.Lexer.Enums.TokenType)">
            <summary>
            Determines whether the given TokenType is a valid string operator.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.IsMathOperator(Proton.Lexer.Enums.TokenType)">
            <summary>
            Determines whether the given TokenType is a valid math operator.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SemanticAnalyzer.IdentifierRegex">
            <remarks>
            Pattern:<br/>
            <code>\\G([a-z_][\\p{L}0-9_]{0,510})</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the start position.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [_a-z].<br/>
                ○ Match a character in the set [0-9_\p{L}] atomically at most 510 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Proton.Semantic.SemanticResult">
            <summary>
            Represents the result of semantic analysis.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SemanticResult.#ctor(System.Collections.Generic.List{Proton.ErrorHandler.BaseException},System.Collections.Generic.List{Proton.ErrorHandler.BaseException},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Proton.Parser.Statements.Statement}},Proton.Semantic.SymbolTable,System.Boolean)">
            <summary>
            Represents the result of semantic analysis.
            </summary>
        </member>
        <member name="T:Proton.Semantic.Services.SemanticService">
            <summary>
            Provides a high-level orchestration service for semantic analysis,
            including validating parsed statements for logical consistency, symbol usage, and type correctness.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Proton.Semantic.Services.SemanticService"/> class with the specified semantic analyzer.
            </remarks>
            <param name="semanticAnalyzer">An instance of <see cref="T:Proton.Semantic.Interfaces.ISemanticAnalyzer"/> responsible for analyzing parsed statement sections.</param>
        </member>
        <member name="M:Proton.Semantic.Services.SemanticService.#ctor(Proton.Semantic.Interfaces.ISemanticAnalyzer)">
            <summary>
            Provides a high-level orchestration service for semantic analysis,
            including validating parsed statements for logical consistency, symbol usage, and type correctness.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:Proton.Semantic.Services.SemanticService"/> class with the specified semantic analyzer.
            </remarks>
            <param name="semanticAnalyzer">An instance of <see cref="T:Proton.Semantic.Interfaces.ISemanticAnalyzer"/> responsible for analyzing parsed statement sections.</param>
        </member>
        <member name="M:Proton.Semantic.Services.SemanticService.Complie(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{Proton.Parser.Statements.Statement}})">
            <summary>
            Performs the complete semantic analysis process on the provided parsed statement sections.
            Validates the semantic correctness of the code, including symbol resolution and rule enforcement.
            </summary>
            <param name="sections">A dictionary containing parsed statements grouped by macro sections.</param>
            <returns>A <see cref="T:Proton.Semantic.SemanticResult"/> representing the outcome of the semantic analysis, including any errors or warnings found.</returns>
        </member>
        <member name="T:Proton.Semantic.Symbol">
            <summary>
            Represents a symbol (such as a variable) in the semantic model.
            Stores its name, type, value(s), and initialization status.
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.Name">
            <summary>
            Gets or sets the token name representing the name of the symbol (e.g., variable identifier).
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.Type">
            <summary>
            Gets or sets the token type representing the data type of the symbol (e.g., Int, Uint, Double).
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.Category">
            <summary>
            Gets or sets the token type representing the data category of the symbol (e.g., Int, Uint, Double).
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.Value">
            <summary>
            Gets or sets the list of tokens representing the value(s) assigned to the symbol.
            For array or list-like assignments, multiple tokens may be present.
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.ValueTokens">
            <summary>
            Gets or sets the list of tokens representing the value(s) assigned to the symbol as string.
            For array or list-like assignments, multiple tokens may be present.
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.SymbolLine">
            <summary>
            Gets or Sets the line number where the symbol was found in the source code.
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.SymbolColumn">
            <summary>
            Gets or Sets the column number where the symbol was found in the source code.
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.IsList">
            <summary>
            Gets or sets a value indicating whether the symbol is list.
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.IsResult">
            <summary>
            Gets or sets a value indicating whether the symbol is result or not.
            </summary>
        </member>
        <member name="P:Proton.Semantic.Symbol.IsInitialized">
            <summary>
            Gets or sets a value indicating whether the symbol has been initialized.
            </summary>
        </member>
        <member name="M:Proton.Semantic.Symbol.MarkAsInitialized">
            <summary>
            Marks the symbol as initialized.
            Useful for tracking usage during semantic analysis.
            </summary>
        </member>
        <member name="M:Proton.Semantic.Symbol.ToString">
            <summary>
            Returns a detailed string representation of the symbol for symbol table display.
            </summary>
            <returns>A formatted string showing the symbol's properties as a table row.</returns>
        </member>
        <member name="T:Proton.Semantic.SymbolTable">
            <summary>
            Represents a symbol table used in semantic analysis.
            Stores and manages declared symbols (e.g., variables) in the current scope.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SymbolTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Proton.Semantic.SymbolTable"/> class.
            </summary>
        </member>
        <member name="P:Proton.Semantic.SymbolTable.Symbols">
            <summary>
            Gets an enumerable collection of all symbols currently stored in the symbol table.
            This provides read-only access to the internal symbol definitions.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SymbolTable.AddSymbol(Proton.Semantic.Symbol)">
            <summary>
            Adds a symbol to the symbol table.
            </summary>
            <param name="symbol">The symbol to add.</param>
        </member>
        <member name="M:Proton.Semantic.SymbolTable.FindSymbol(Proton.Lexer.Token)">
            <summary>
            Finds and returns a symbol by its name.
            </summary>
            <param name="symbol">The token of the symbol to find.</param>
            <returns>The found <see cref="T:Proton.Semantic.Symbol"/> instance, or null if not found.</returns>
        </member>
        <member name="M:Proton.Semantic.SymbolTable.UpdateSymbol(Proton.Semantic.Symbol)">
            <summary>
            Updates an existing symbol in the symbol table.
            Throws an error if the symbol does not exist.
            </summary>
            <param name="symbol">The updated symbol instance.</param>
        </member>
        <member name="M:Proton.Semantic.SymbolTable.MarkSymbolAsUsed(Proton.Semantic.Symbol)">
            <summary>
            Marks a symbol as initialized or used by its name.
            Useful for tracking variable initialization during semantic analysis.
            </summary>
            <param name="symbol">The updated symbol instance.</param>
            <returns>True if the symbol already initialized; otherwise, false.</returns>
        </member>
        <member name="M:Proton.Semantic.SymbolTable.Clear">
            <summary>
            Clears all symbols from the symbol table.
            </summary>
        </member>
        <member name="M:Proton.Semantic.SymbolTable.DisplaySymbols">
            <summary>
            Returns a formatted table of all symbols currently stored in the symbol table.
            Each symbol is displayed with its name, type, category, position, list status, initialization state, value, and result status.
            If no symbols are found, a default message is returned.
            </summary>
            <returns>A string representing the formatted symbol table or a message indicating no symbols were found.</returns>
        </member>
        <member name="M:Proton.Semantic.SymbolTable.SymbolExists(System.String)">
            <summary>
            Checks if a symbol with the given name exists in the symbol table.
            </summary>
            <param name="name">The name of the symbol to check for.</param>
            <returns>True if the symbol exists; otherwise, false.</returns>
        </member>
        <member name="T:ProtonComplier.Semantic.SymbolTableFormat">
            <summary>
            Defines constant column widths for formatting the symbol table display in a consistent and aligned manner.
            Each constant corresponds to the character width of a specific column, such as Name, Type, Line, etc.
            Used primarily when generating textual representations of the semantic symbol table.
            </summary>
        </member>
        <member name="F:ProtonComplier.Semantic.SymbolTableFormat.NameWidth">
            <summary>
            The column width allocated for the symbol name.
            </summary>
        </member>
        <member name="F:ProtonComplier.Semantic.SymbolTableFormat.TypeWidth">
            <summary>
            The column width allocated for the symbol's data type (e.g., Int, Double).
            </summary>
        </member>
        <member name="F:ProtonComplier.Semantic.SymbolTableFormat.CategoryWidth">
            <summary>
            The column width allocated for the symbol's category (e.g., Numeric, Identifier).
            </summary>
        </member>
        <member name="F:ProtonComplier.Semantic.SymbolTableFormat.LineWidth">
            <summary>
            The column width allocated for the symbol's source code line number.
            </summary>
        </member>
        <member name="F:ProtonComplier.Semantic.SymbolTableFormat.ColWidth">
            <summary>
            The column width allocated for the symbol's source code column number.
            </summary>
        </member>
        <member name="F:ProtonComplier.Semantic.SymbolTableFormat.ListWidth">
            <summary>
            The column width allocated to display whether the symbol represents a list.
            </summary>
        </member>
        <member name="F:ProtonComplier.Semantic.SymbolTableFormat.InitializedWidth">
            <summary>
            The column width allocated for the symbol's initialization status (e.g., Yes/No).
            </summary>
        </member>
        <member name="F:ProtonComplier.Semantic.SymbolTableFormat.ValueWidth">
            <summary>
            The column width allocated for displaying the symbol's value(s).
            </summary>
        </member>
        <member name="F:ProtonComplier.Semantic.SymbolTableFormat.ResultWidth">
            <summary>
            The column width allocated to indicate if the symbol is a result.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IdentifierRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IdentifierRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IdentifierRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IdentifierRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
